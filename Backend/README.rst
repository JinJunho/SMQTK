SMQTK Backend README
####################

This README is intended to give an overview of the contents of the SMQTK Backend
module.


What is the SMQTK Backend?
==========================
The intent of the SMQTK Backend system is to provide an API for processing
Iterative Query Refinement (IQR) and archival, model-based ranking. This is
achieved via a RESTful API that controls state transformations and and
asynchronously performs work requested, storing results in the Mongo Database
instance that is configured. Asynchronous work performed includes model
training, ranking and score fusion for Iterative Query Refinement (IQR) as well
as for archive ranking/fusion.


Using the SMQTK Backend
=======================

Third-party libraries (TPL) and libsvm
--------------------------------------
Included in this repository is a space for third-party libraries (TPL), or code
bases, compiled or not, that are not the creation of Kitware, but are used
within our system (see their individual packages for README files, copyright
notices and licenses).

As of the creation of this file, there is only one that we include and use:
libsvm. Our use of this package is limited to its compiled library and python
interface. Currently, the library is only every referenced via its python
interface. Included in this repository is an in-source, pre-compiled library for
RHEL 6 (dynamic library) and Windows (DLL) operating systems. The RHEL 6 library
is build in-source due to the libsvm python interface looking for the library
in-source before it checks system paths. If this backend is being run on
Unix operating system that is not RHEL 6 or CentOS 6, it is recommended that the
library be rebuilt. Refer to the documentation provided in the package for
information on how to build the libsvm library (in-source build recommended for
priority over a system installed version). If you decide to use a system install
of libsvm 3.17, make sure the library has been removed from the source
directory.

Start-up, Usage and Shutdown
----------------------------
The SMQTK Backend is started by instantiating a SmqtkController object
(``SMQTK_Backend/SmqtkController.py``). A configuration instance is required to
construct a SmqtkController instance
(``SMQTK_Backend/utils/SafeConfigCommentParser.py``). A default configuration
may be generated by the SmqtkController class method
``SmqtkController.generate_config()``, which returns just such a configuration
instance with defaults for options filled in. The configuration object my be
introspected to see the defaults, or the method in the source file may be
viewed.

Multiple instances of SmqtkController do not need to be created as the system is
designed to be used in multi-user situations by keying actions on a search
session ID created by an initialization method
(``SmqtkController.init_new_search_session(...)``). Once a session is
initialized, actions may be performed through the SmqtkController instance using
the session ID as a key. Such actions include query refinement, state
introspection, and archival search. Multiple SmqtkController instance may exist
at the same time if desired.

SmqtkController system shutdown can be explicitly invoked through the use of the
``SmqtkController.shutdown()`` method, or by shutting down python (shutdown
method is registered to be called at interpreter exit). If the program using the
SmqtkController is killed by a signal not handled by python, or is stopped by
an internal fatal error, this shutdown method is not called unless the program
explicitly acts otherwise.


The Architecture Layout
=======================
TODO : Explain system architecture layout and design philosophies.
